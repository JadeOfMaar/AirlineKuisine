//Cabin long: 
@PART[dsak_cabin2]:NEEDS[!USILifeSupport,!TacLifeSupport,!SnacksUtils,!Kerbalism]
{
	RESOURCE
	{
		name = ElectricCharge
		amount = 500
		maxAmount = 500
	}
}

//Processor A: Power Core
@PART[dsak_proc_a]:NEEDS[!USILifeSupport,!TacLifeSupport,!SnacksUtils,!Kerbalism]
{
	@title = DS Mk2 Hybrid Thermo-Electric Generator
	@description = Alternators and fuel cells are very nice to have, but they don't cut the cheese or spread the butter very fast when there's a mighty need for power. Ultimately we realized that we could use the hot air around an engine bell more efficiently, and scrambled to develop something that can move that heat around and make a hamster wheel spin without the hamster. We don't know yet if it's possible to preserve or recharge this heat energy indefinitely but hey, this state-of-the-art device provides two inputs and a new way to produce a lot of ElectricCharge when needed!
	@MODEL
	{
		@model = Squad/Parts/FuelTank/mk2FuselageShort/FuselageShortLiquid
	}
	MODULE
	{
		name = ModuleResourceConverter
		ConverterName =  HTEG
		StartActionName = Start HTEG
		StopActionName = Stop HTEG
		ToggleActionName = Toggle HTEG
		AutoShutdown = false
		 
		INPUT_RESOURCE
		{
			ResourceName = LiquidFuel
			Ratio = 0.225
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 2.5
			DumpExcess = false
		}
		OUTPUT_RESOURCE
		{
			ResourceName = MillPower
			Ratio = 0.5
			DumpExcess = true
		}
	}
	MODULE
	{
		ConverterName = #autoLOC_502022 //#autoLOC_502022 = Fuel Cell
		StartActionName = #autoLOC_502023 //#autoLOC_502023 = Start Fuel Cell
		StopActionName = #autoLOC_502024 //#autoLOC_502024 = Stop Fuel Cell
		ToggleActionName = #autoLOC_502025 //#autoLOC_502025 = Toggle Fuel Cell
		AutoShutdown = false
		 
		INPUT_RESOURCE
		{
			ResourceName = LiquidFuel
			Ratio = 0.02025
			FlowMode = STAGE_PRIORITY_FLOW
  		}
		INPUT_RESOURCE
		{
			ResourceName = Oxidizer
			Ratio = 0.02475
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 18
			DumpExcess = false
		}
		OUTPUT_RESOURCE
		{
			ResourceName = MillPower
			Ratio = 0.5
			DumpExcess = true
		}
	}
	MODULE
	{
		name = ModuleResourceConverter
		AlwaysActive = true
		ConverterName = Thermal Flywheels
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = false
		INPUT_RESOURCE
		{
			ResourceName = MillPower
			Ratio = 0.1
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 10
			DumpExcess = true
		}
	}
	RESOURCE
	{
		name = MillPower
		amount = 0
		maxAmount = 25
	}
}

//Processor B: Ore Crusher
@PART[dsak_proc_b]:NEEDS[!USILifeSupport,!TacLifeSupport,!SnacksUtils,!Kerbalism]
{
	@title = DS Mk2 Industrial ISRU Booster
	@description = Not every interplanetary spaceplane needs to be incredibly efficient with its fuel mass. We have seen demand for more efficiency or automation with fuel processing and learned that anything crushed finer and hotter tends to separate or mix better. As a consequence we've found a way to fit a smelter facility into an aircraft... It does not need an Engineer present to operate at full capacity but it needs a fair share more power to operate. It also operates at 25% the capacity of the Mk3 version.
	MODULE
	{
		name = ModuleResourceConverter
		ConverterName = Ore Crusher
		StartActionName = Start Ore Crusher
		StopActionName = Stop Ore Crusher
		ToggleActionName = Toggle Ore Crusher
		AutoShutdown = true
		TemperatureModifier
		{
			key = 0 100000
			key = 750 50000
			key = 1000 10000
			key = 1250 500	
			key = 2000 50	
			key = 4000 0
		}				
		GeneratesHeat = true
		DefaultShutoffTemp = .8
		ThermalEfficiency 
		{
			key = 0 0 0 0
			key = 500 0.1 0 0
			key = 1000 1.0 0 0
			key = 1250 0.1 0 0
			key = 3000 0 0 0 
		}
				 
		INPUT_RESOURCE
		{
			ResourceName = Ore
			Ratio = 0.9
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 15
		}
		OUTPUT_RESOURCE
		{
			ResourceName = FineOre
			Ratio = 0.9
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	MODULE
	{
		name = ModuleResourceConverter
		ConverterName = Fuel Distiller (LqdFuel)
		StartActionName = Start Fuel Distiller (LqdFuel)
		StopActionName = Stop Fuel Distiller (LqdFuel)
		ToggleActionName = Toggle Distiller (LqdFuel)
		AutoShutdown = false
		 
		INPUT_RESOURCE
		{
			ResourceName = FineOre
			Ratio = 0.6325
			FlowMode = STAGE_PRIORITY_FLOW
  		}
		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 9
		}
		OUTPUT_RESOURCE
		{
			ResourceName = LiquidFuel
			Ratio = 0.5175
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	MODULE
	{
		name = ModuleResourceConverter
		ConverterName = Fuel Distiller (Ox)
		StartActionName = Start Fuel Distiller (Ox)
		StopActionName = Stop Fuel Distiller (Ox)
		ToggleActionName = Toggle Fuel Distiller (Ox)
		AutoShutdown = false
		 
		INPUT_RESOURCE
		{
			ResourceName = Ore
			Ratio = 0.31625
			FlowMode = STAGE_PRIORITY_FLOW
  		}
		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 9
		}
		OUTPUT_RESOURCE
		{
			ResourceName = Oxidizer
			Ratio = 0.6325
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	MODULE
	{
		name = ModuleResourceConverter
		ConverterName = Fuel Distiller (Monoprop)
		StartActionName = Start Fuel Distiller (Monoprop)
		StopActionName = Stop Fuel Distiller (Monoprop)
		ToggleActionName = Toggle Distiller (Monoprop)
		AutoShutdown = false
		 
		INPUT_RESOURCE
		{
			ResourceName = FineOre
			Ratio = 0.33125
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 9
		}
		OUTPUT_RESOURCE
		{
			ResourceName = MonoPropellant
			Ratio = 0.575
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	RESOURCE
	{
		name = FineOre
		amount = 0
		maxAmount = 50
	}
}

//Processor C: ISRU
@PART[dsak_proc_c]:NEEDS[!USILifeSupport,!TacLifeSupport,!SnacksUtils,!Kerbalism]
{
	@title = DS Mk2 Convert-O-Tron
	@description = After investing quite enough into planning, simulation, planning again, and seeing spaceplanes stretch a drop of LiquidFuel incredibly far, or suffer without an efficient and form-fitting we decided we would develop Convert-O-Tron technology a little further, and produce this handy thing and its companion, the Industrial ISRU Booster.
	MODULE
	{
		name = ModuleOverheatDisplay
	}

	MODULE
	{
		name = ModuleResourceConverter
		ConverterName = #autoLOC_502026 //#autoLOC_502026 = Lf+Ox
		StartActionName = #autoLOC_502027 //#autoLOC_502027 = Start ISRU [Lf+Ox]
		StopActionName = #autoLOC_502028 //#autoLOC_502028 = Stop ISRU [Lf+Ox]
		ToggleActionName = Toggle ISRU [Lf+Ox]
		AutoShutdown = true
		TemperatureModifier
		{
			key = 0 100000
			key = 750 50000
			key = 1000 10000
			key = 1250 500	
			key = 2000 50	
			key = 4000 0
		}				
		GeneratesHeat = true
		DefaultShutoffTemp = .8
		ThermalEfficiency 
		{
			key = 0 0 0 0
			key = 500 0.1 0 0
			key = 1000 1.0 0 0
			key = 1250 0.1 0 0
			key = 3000 0 0 0 
		}
		
		UseSpecialistBonus = true
		SpecialistEfficiencyFactor = 0.2
		SpecialistBonusBase = 0.05
		UseSpecialistHeatBonus = true
		SpecialistHeatFactor = 0.1
		ExperienceEffect = ConverterSkill
		EfficiencyBonus = 1
		 
		INPUT_RESOURCE
		{
			ResourceName = Ore
			Ratio = 0.15
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 9
		}
		OUTPUT_RESOURCE
		{
			ResourceName = LiquidFuel
			Ratio = 0.135
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = Oxidizer
			Ratio = 0.165
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}

	MODULE
	{
		name = ModuleResourceConverter
		ConverterName = #autoLOC_502029 //#autoLOC_502029 = Monoprop
		StartActionName = #autoLOC_502030 //#autoLOC_502030 = Start ISRU [Monoprop]
		StopActionName = #autoLOC_502031 //#autoLOC_502031 = Stop ISRU [Monoprop]
		ToggleActionName = Toggle ISRU [Monoprop]
		AutoShutdown = true
		TemperatureModifier
		{
			key = 0 100000
			key = 750 50000
			key = 1000 10000
			key = 1250 500	
			key = 2000 50	
			key = 4000 0
		}				
		GeneratesHeat = true
		DefaultShutoffTemp = .8
		ThermalEfficiency 
		{
			key = 0 0 0 0
			key = 500 0.1 0 0
			key = 1000 1.0 0 0
			key = 1250 0.1 0 0
			key = 3000 0 0 0 
		}

		UseSpecialistBonus = true
		SpecialistEfficiencyFactor = 0.2
		SpecialistBonusBase = 0.05
		UseSpecialistHeatBonus = true
		SpecialistHeatFactor = 0.1
		ExperienceEffect = ConverterSkill
		EfficiencyBonus = 1
		
		INPUT_RESOURCE
		{
			ResourceName = Ore
			Ratio = 0.15
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 9
		}
		OUTPUT_RESOURCE
		{
			ResourceName = MonoPropellant
			Ratio = 0.3
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}


	MODULE
	{
		name = ModuleResourceConverter
		ConverterName = #autoLOC_502032 //#autoLOC_502032 = LiquidFuel
		StartActionName = #autoLOC_502033 //#autoLOC_502033 = Start ISRU [LqdFuel]
		StopActionName = #autoLOC_502034 //#autoLOC_502034 = Stop ISRU [LqdFuel]
		ToggleActionName = Toggle ISRU [LqdFuel]
		AutoShutdown = true
		TemperatureModifier
		{
			key = 0 100000
			key = 750 50000
			key = 1000 10000
			key = 1250 500	
			key = 2000 50	
			key = 4000 0
		}				
		GeneratesHeat = true
		DefaultShutoffTemp = .8
		ThermalEfficiency 
		{
			key = 0 0 0 0
			key = 500 0.1 0 0
			key = 1000 1.0 0 0
			key = 1250 0.1 0 0
			key = 3000 0 0 0 
		}
		
		UseSpecialistBonus = true
		SpecialistEfficiencyFactor = 0.2
		SpecialistBonusBase = 0.05
		UseSpecialistHeatBonus = true
		SpecialistHeatFactor = 0.1
		ExperienceEffect = ConverterSkill
		EfficiencyBonus = 1

		INPUT_RESOURCE
		{
			ResourceName = Ore
			Ratio = 0.135
			FlowMode = STAGE_PRIORITY_FLOW
  		}
		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 9
		}
		OUTPUT_RESOURCE
		{
			ResourceName = LiquidFuel
			Ratio = 0.27
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}

	
	MODULE
	{
		name = ModuleResourceConverter
		ConverterName = #autoLOC_502035 //#autoLOC_502035 = Oxidizer
		StartActionName = #autoLOC_502036 //#autoLOC_502036 = Start ISRU [Ox]
		StopActionName = #autoLOC_502037 //#autoLOC_502037 = Stop ISRU [Ox]
		ToggleActionName = Toggle ISRU [Ox]
		AutoShutdown = true
		TemperatureModifier
		{
			key = 0 100000 0 0
			key = 750 50000 0 0
			key = 1000 10000 0 0
			key = 1250 500 0 0	 
			key = 2000 50 0 0	
			key = 4000 0 0 0
		}				
		GeneratesHeat = true
		DefaultShutoffTemp = .8
		ThermalEfficiency 
		{
			key = 0 0 0 0
			key = 500 0.1 0 0
			key = 1000 1.0 0 0
			key = 1250 0.1 0 0
			key = 3000 0 0 0 
		}
		
		UseSpecialistBonus = true
		SpecialistEfficiencyFactor = 0.2
		SpecialistBonusBase = 0.05
		UseSpecialistHeatBonus = true
		SpecialistHeatFactor = 0.1
		ExperienceEffect = ConverterSkill
		EfficiencyBonus = 1
		 
		INPUT_RESOURCE
		{
			ResourceName = Ore
			Ratio = 0.165
			FlowMode = STAGE_PRIORITY_FLOW
  		}
		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 9
		}
		OUTPUT_RESOURCE
		{
			ResourceName = Oxidizer
			Ratio = 0.33
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
		
	MODULE
	{
		name = ModuleCoreHeat
		CoreTempGoal = 1000					//Internal temp goal - we don't transfer till we hit this point
		CoreToPartRatio = 0.1				//Scale back cooling if the part is this % of core temp
		CoreTempGoalAdjustment = 0			//Dynamic goal adjustment
		CoreEnergyMultiplier = 0.1			//What percentage of our core energy do we transfer to the part
		HeatRadiantMultiplier = 0.25		//If the core is hotter, how much heat radiates?
		CoolingRadiantMultiplier = 0		//If the core is colder, how much radiates?
		HeatTransferMultiplier = 0			//If the part is hotter, how much heat transfers in?
		CoolantTransferMultiplier = 0.01	//If the part is colder, how much of our energy can we transfer?
		radiatorCoolingFactor = 1			//How much energy we pull from core with an active radiator?  >= 1
		radiatorHeatingFactor = 0.05		//How much energy we push to the active radiator
		MaxCalculationWarp = 1000			//Based on how dramatic the changes are, this is the max rate of change
		CoreShutdownTemp = 1500				//At what core temperature do we shut down all generators on this part?
		MaxCoolant = 75						//Maximum amount of radiator capacity we can consume - 50 = 1 small
	}
}